on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Dash [image](https://wiki.5e.tools/images/thumb/b/bb/Sprint.png/30px-Sprint.png#.png) --!Dash|When you take the Dash action, you gain extra Movement for the current turn. The increase equals your speed, after applying any modifiers. With a speed of 30 feet, for example, you can move up to 60 feet on Your Turn if you dash.^^^^Any increase or decrease to your speed changes this additional Movement by the same amount. If your speed of 30 feet is reduced to 15 feet, for instance, you can move up to 30 feet this turn if you dash. --api_token-mod|_ids @{selected|token_id} _ignore-selected _set statusmarkers|dash}}';
	const macro_name = 'Dash';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Disarm [image](https://wiki.5e.tools/images/thumb/e/e5/Drop-weapon.png/30px-Drop-weapon.png#.png) --!Disarm:|A creature can use a weapon attack to knock a weapon or another item from a targets grasp. The attacker makes an attack roll contested by the targets Dexterity (Acrobatics) check. If the attacker wins the contest, the attack causes no damage or other ill effect, but the defender drops the item. ^^^^ The attacker has disadvantage on its attack roll if the target is holding the item with two or more hands. The target has advantage on its ability check if it is larger than the attacking creature, or disadvantage if it is smaller. --Disarm Roll:|?{Attack Type|Melee, ?{Advantage?&#124;Normal&#44;  [[ [$Atk] 1d20 + @{selected|strength_mod}+@{selected|pb}]]&#124;Advantage&#44; [[ [$Atk] 2d20kh1 + @{selected|strength_mod}+@{selected|pb}]]&#124;Disadvantage&#44;  [[ [$Atk] 2d20kl1 + @{selected|strength_mod}+@{selected|pb}]]&#125;|Ranged, ?{Advantage?&#124;Normal&#44;  [[ [$Atk] 1d20 + @{selected|dexterity_mod}+@{selected|pb}]]&#124;Advantage&#44; [[ [$Atk] 2d20kh1 + @{selected|dexterity_mod}+@{selected|pb}]]&#124;Disadvantage&#44;  [[ [$Atk] 2d20kl1 + @{selected|dexterity_mod}+@{selected|pb}]]&#125;} **VS** [[ [$Acr] 1d20+@{target|acrobatics}]] --?? $Atk.total < $Acr.total ?? Fail:|The target is not disarmed. --?? $Atk.total >= $Acr.total ?? Success:| Target is disarmed. --?? $Atk.total >= $Acr.total ?? api_token-mod|_ids @{target|token_id} _ignore-selected _set statusmarkers|disarmed}}';
	const macro_name = 'Disarm';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Disengage [image](https://wiki.5e.tools/images/thumb/b/be/Amputation.png/30px-Amputation.png#.png) --!Disengage:|If you take the Disengage action, your Movement doesn’t provoke Opportunity Attacks for the rest of the turn.}}';
	const macro_name = 'Disengage';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Dodge [image](https://wiki.5e.tools/images/thumb/f/f4/Tread.png/25px-Tread.png#.png) --Dodge:|When you take the Dodge action, you focus entirely on avoiding attacks. Until the start of your next turn, any Attack roll made against you has disadvantage if you can see the attacker, and you make Dexterity Saving Throws with advantage. You lose this benefit if you are Incapacitated or if your speed drops to 0. --api_token-mod|_ids @{selected|token_id} _ignore-selected _set statusmarkers|dodge}}';
	const macro_name = 'Dodge';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Dash [image](https://wiki.5e.tools/images/thumb/b/bf/Grab.png/25px-Grab.png#.png) --!Grapple|When you want to grab a creature or wrestle with it, you can use the Attack action to make a special melee attack, a grapple. If you’re able to make multiple attacks with the Attack action, this att⁠ack replaces one of them.^^^^The target of your grapple must be no more than one size larger than you and must be within your reach. Using at least one free hand, you try to seize the target by making a grapple check instead of an Attack roll. You succeed automatically if the target is Incapacitated. If you succeed, you subject the target to the Grappled condition. The condition specifies the things that end it, and you can release the target whenever you like (no action required). --Grapple:|@{selected|character_name}:[[ [$Atk] 1d20+@{selected|athletics}]] **VS** @{target|character_name}:[[ [$Acr] 1d20+?{Target Choice|Athletics, @{target|athletics}|Acrobatics, @{target|acrobatics}}]] --?? $Atk.total < $Acr.total ?? Fail:|Target is not Grappled! --?? $Atk.total >= $Acr.total ?? Success:|Target is Grappled! --?? $Atk.total >= $Acr.total ?? api_token-mod|_ids @{target|token_id} _ignore-selected _set statusmarkers|grapple}}';
	const macro_name = 'Grapple';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Help --Description:|You can lend your aid to another creature in the completion of a task. When you take the Help action, the creature you aid gains advantage on the next ability check it makes to perform the task you are helping with, provided that it makes the check before the start of your next turn.^^^^Alternatively, you can aid a friendly creature in attacking a creature within 5 feet of you. You feint, distract the target, or in some other way team up to make your ally’s Attack more effective. If your ally attacks the target before your next turn, the first att⁠ack roll is made with advantage. --api_token-mod|_ids @{target|token_id} _ignore-selected _set statusmarkers|helping}}';
	const macro_name = 'Help';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Hide --Description:|When you take the Hide action, you make a Stealth check in an attempt to hide, following the rules for Hiding. --Stealth Roll Result:|?{Advantage?|Normal,  [[ [$Atk] 1d20 + @{selected|stealth} ]]|Advantage, [[ [$Atk] 2d20kh1 + @{selected|stealth} ]]|Disadvantage,  [[ [$Atk] 2d20kl1 + @{selected|stealth} ]]}}}';
	const macro_name = 'Hide';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Ready [image](https://wiki.5e.tools/images/thumb/6/64/Sentry-gun.png/25px-Sentry-gun.png#.png) --!Ready|Sometimes you want to get the jump on a foe or wait for a particular circumstance before you act. To do so, you can take the Ready action on Your Turn, which lets you act using your Reaction before the start of your next turn.^^^^First, you decide what perceivable circumstance will trigger your Reaction. Then, you choose the action you will take in response to that trigger, or you choose to move up to your speed in response to it.^^^^When the trigger occurs, you can either take your Reaction right after the trigger finishes or ignore the trigger.^^^^When you ready a spell, you cast it as normal but hold its energy, which you release with your Reaction when the trigger occurs. To be readied, a spell must have a Casting Time of 1 action, and holding onto the spell’s magic requires Concentration. If your concen⁠tration is broken, the spell dissipates without taking Effect. --!Button|[Ready a Reaction](!cmaster --add,condition=ready,duration=1,direction=-1,message=&#63;{Action you wish to ready&#63;|})}}';
	const macro_name = 'Ready';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Search [image](https://wiki.5e.tools/images/thumb/2/25/Magnifying-glass.png/30px-Magnifying-glass.png#.png) --!Search|^*When you take the Sear⁠ch action, you devote your attention to finding something. Depending on the Nature of your se⁠arch, the DM might have you make a Wisdom (Perception) check or an Intelligence (Investigation) check.^^**Perception:**[[1d20+@{selected|perception_bonus}]] **Investigation:**[[1d20+@{selected|Investigation_bonus}]]}}';
	const macro_name = 'Search';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!power {{--format|pcstats --name|Shove [image](https://wiki.5e.tools/images/thumb/a/a7/Hand.png/25px-Hand.png#.png) --!results|~C**@{selected|character_name}:[[1d20+@{selected|athletics_bonus}]] //VS// @{target|character_name}:[[1d20+?{Targets Chosen Skill|Athletics, @{target|athletics_bonus}|Acrobatics, @{target|acrobatics_bonus}}]]**~C --~~~ --Shove:| Using the Attack action, you can make a spec⁠ia⁠l melee atta⁠ck to shove a creature, either to knock it prone or push it away from you. If you’re able to make multiple attacks with the Att⁠ack action, this atta⁠ck replaces one of them.^^^^The target must be no more than one size larger than you and must be within your reach. Instead of Making an Attack roll, you make a Strength (Athletics) check contested by the target’s Stren⁠gth (Athletics) or Dexterity (Acrobatics) check (the target chooses the ability to use). You succeed automatically if the target is Incapacitated. If you succeed, you either knock the target prone or push it 5 feet away from you.}}}}';
	const macro_name = 'Shove';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!cmaster --add,condition=burrow,duration=1,direction=0u.}}}}';
	const macro_name = 'Burrow';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!cmaster --add,condition=climbing,duration=1,direction=0';
	const macro_name = 'Climb';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!cmaster --add,condition=flying,duration=1,direction=0';
	const macro_name = 'Fly';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!cmaster --turn,next';
	const macro_name = 'End-Turn';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '!cmaster --add,condition=swimming,duration=1,direction=0';
	const macro_name = 'Swim';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Attacks}';
	const macro_name = 'Attacks';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Spells}';
	const macro_name = 'Spells';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Utility}';
	const macro_name = 'Utility Belt';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Feats}';
	const macro_name = 'Feats';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Traits}';
	const macro_name = 'Traits';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Saves}';
	const macro_name = 'Save';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Checks}';
	const macro_name = 'Check';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
on('ready', function() {
    
	const macro_text = '%{selected|Statblock}';
	const macro_name = 'Statblock';
    
	let players = findObjs({_type: 'player'});
    
	_.each(players, player => {
    		let playerID = player.get('_id');
let macro = findObjs({_type: 'macro', name: macro_name, _playerid: playerID})[0];
   	 
    		if (macro)
macro.set('action', macro_text);
    	else {createObj
        			('macro', {_playerid: playerID, name: macro_name, action: macro_text});
    		}
	},
	)
})
